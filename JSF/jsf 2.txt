Custom Renderer

FacesRenderer(componentFamily="javax.faces.Input",
rendererType="com.corejsf.Spinner")
public class SpinnerRenderer extends Renderer {

**
Renderers extend the
javax.faces.render.Renderer class. That class has seven methods, four of which are
familiar:
• void encodeBegin(FacesContext context, UIComponent component)
• void encodeChildren(FacesContext context, UIComponent component)
• void encodeEnd(FacesContext context, UIComponent component)
• void decode(FacesContext context, UIComponent component)

**
DataSources

@Resource(name="jdbc/mydb") private DataSource source;

****
Ejb  - Stateful beans

@Named("user") @SessionScoped @Stateful
public class UserBean {
private String name;
@PersistenceContext(unitName="default") private EntityManager em;
...
public String getName() { return name; } // Accessed in JSF page
public void setName(String newValue) { name = newValue; }
public String login() { // Called from JSF page
doLogin();
if (loggedIn) return "loginSuccess";
else return "loginFailure";
}
public void doLogin() { // Accesses database
Query query = em.createQuery(...).setParameter("username", name);
@SuppressWarnings("unchecked") List<Credentials> result
= query.getResultList();
...
}
}

Container-Managed Authentication and Authorization

For example, the following security constraint restricts all pages in the
protected subdirectory to authenticated users who have the role of registereduser
or invitedguest:
<security-constraint>
<web-resource-collection>
<url-pattern>/faces/protected/*</url-pattern>
<url-pattern>/protected/*</url-pattern>
</web-resource-collection>
<auth-constraint>
<role-name>registereduser</role-name>
<role-name>invitedguest</role-name>
</auth-constraint>
</security-constraint>

****
<login-config>
<auth-method>FORM</auth-method>
<form-login-config>
<form-login-page>/login.html</form-login-page>
<form-error-page>/noauth.html</form-error-page>
</form-login-config>
</login-config>

**
You are free to design any desired appearance for
the login page, but you must include a mechanism to submit a request to
j_security_check with request parameters named j_username and j_password. The
following form will do the job:
<form method="POST" action="j_security_check">
User name: <input type="text" name="j_username"/>
Password: <input type="password" name="j_password"/>
<input type="submit" value="Login"/>
</form>

**You can also specify “basic” authentication by placing the following login
configuration into web.xml:
<login-config>
<auth-method>BASIC</auth-method>
<realm-name>This string shows up in the dialog</realm-name>
</login-config>

In the Configuration -> Security -> Realms menu, create a new realm called
corejsfRealm (see Figure 12–13). Use the settings in Table 12–2 on page 524.
Make a Groups table in the COREJSF database with these instructions:
CREATE TABLE Groups (username VARCHAR(20), groupname VARCHAR(20));
INSERT INTO Groups VALUES ('troosevelt', 'registereduser');
INSERT INTO Groups VALUES ('troosevelt', 'invitedguest');
INSERT INTO Groups VALUES ('tjefferson', 'invitedguest');

**!!
The HttpServletRequest yields a small
amount of information, in particular, the name of the user who logged in. You
get the request object from the external context:
ExternalContext external
= FacesContext.getCurrentInstance().getExternalContext();
HttpServletRequest request
= (HttpServletRequest) external.getRequest();
String user = request.getRemoteUser();
You can also test whether the current user belongs to a given role. For example:
String role = "admin";
boolean isAdmin = request.isUserInRole(role);   

===========================
Validation scripts

<h:form id="paymentForm" onsubmit="return validatePaymentForm(this);">
   ...
   <corejsf:validatorScript functionName="validatePaymentForm"/>
</h:form>
 
@FacesValidator("com.corejsf.CreditCard")
14. public class CreditCardValidator implements Validator, Serializable {
.............

@FacesComponent("com.corejsf.ValidatorScript")
17. @ResourceDependency(library="javascript", name="validateCreditCard.js",
18. target="head")
19. public class UIValidatorScript extends UIComponentBase {
20. private Map<String, Validator> validators
21. = new LinkedHashMap<String, Validator>();
22.
23. public String getRendererType() { return null; }
24. public String getFamily() { return null; }
25.
26. private void findCreditCardValidators(UIComponent c, FacesContext context) {
27. if (c instanceof EditableValueHolder) {
28. EditableValueHolder h = (EditableValueHolder) c;
29. for (Validator v : h.getValidators()) {
30. if (v instanceof CreditCardValidator) {
31. String id = c.getClientId(context);
32. validators.put(id, v);
33. }
34. }
}
36.
37. for (UIComponent child : c.getChildren())
38. findCreditCardValidators(child, context);
39. }
40.
41. private void writeScriptStart(ResponseWriter writer) throws IOException {
42. writer.startElement("script", this);
43. writer.writeAttribute("type", "text/javascript", null);
44. writer.writeAttribute("language", "Javascript1.1", null);
45. writer.write("\n<!--\n");
46. }
47.
48. private void writeScriptEnd(ResponseWriter writer) throws IOException {
49. writer.write("\n-->\n");
50. writer.endElement("script");
51. }
52.
53. private void writeValidationFunctions(ResponseWriter writer,
54. FacesContext context) throws IOException {
55. writer.write("var bCancel = false;\n");
56. writer.write("function " );
57. writer.write(getAttributes().get("functionName").toString());
58. writer.write("(form) { return bCancel || validateCreditCard(form); }\n");
59.
60. writer.write("function ");
61. String formId = getParent().getClientId(context);
62. writer.write(formId);
63. writer.write("_creditCard() { \n");
64. // for each field validated by this type, add configuration object
65. int k = 0;
66. for (String id : validators.keySet()) {
67. CreditCardValidator v = (CreditCardValidator) validators.get(id);
68. writer.write("this[" + k + "] = ");
69. k++;
70.
71. writer.write("new Array('");
72. writer.write(id);
73. writer.write("', '");
74. writer.write(v.getErrorMessage(v.getArg(), context));
75. writer.write("', '');\n"); // Third element unused for credit card validator
76. }
77. writer.write("}\n");
78. }
79.
80. public void encodeBegin(FacesContext context) throws IOException {
81. ResponseWriter writer = context.getResponseWriter();
82.
83. validators.clear();
findCreditCardValidators(context.getViewRoot(), context);
85.
86. writeScriptStart(writer);
87. writeValidationFunctions(writer, context);
88. writeScriptEnd(writer);
89. }
90. }

=========================
Config

<web-app>
<context-param>
  <param-name>URL</param-name>
  <param-value>ldap://localhost:389</param-value>
</context-param>
...
</web-app>

ExternalContext external = FacesContext.getCurrentInstance().getExternalContext();
String url = external.getInitParameter("URL");

============================

Extend EL
You extend the ELResolver class to implement a resolver. The key method is:
public Object getValue(ELContext context, Object base, Object property)
If your resolver knows how to resolve the expression base.property, then you call
context.setPropertyResolved(true);
and return the value of the expression.

==========================

Debugging
https://code.google.com/p/primefaces-ext/
Add its JAR file and the Commons Logging JAR
file to your web application’s WEB-INF/lib directory. Add a namespace
declaration to the html tag:
xmlns:ft="http://primefaces.prime.com.tr/facestrace"
Then add a tag at the end of your JSF page:
<ft:trace/>
Figure

===============
Testing

Black-box test automation frameworks, such as HTMLUnit (http://htmlunit.
sourceforge.net) or Selenium (http://seleniumhq.org), let you write scripts that simulate
browser sessions.


The JSFUnit framework


public void testInitialPage() throws IOException {
JSFSession jsfSession = new JSFSession("/faces/index.xhtml");
JSFServerSession server = jsfSession.getJSFServerSession();
assertEquals("/index.xhtml", server.getCurrentViewID());
UIComponent nameField = server.findComponent("name");
assertTrue(nameField.isRendered());
assertEquals("troosevelt", server.getManagedBeanValue("#{user.name}"));
}









